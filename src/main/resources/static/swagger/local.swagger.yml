swagger: "2.0"
info:
  title: "글을 담다 API"
  version: "1.4.0"
host: "localhost:8080"
schemes:
  - "http"

tags:
  - name: "Service Status APIs"
    description: "서비스 상태 API 목록"
  - name: "Geul Search APIs"
    description: "글 조회 API 목록"
  - name: "Geul ETC APIs"
    description: "글 기타 API 목록"
  - name: "Profile APIs"
    description: "프로필 API 목록"
  - name: "General User Login APIs"
    description: "일반 회원 로그인 API 목록"
  - name: "Third-party User Login APIs"
    description: "서드파티 회원 로그인 API 목록"
  - name: "User Join APIs"
    description: "회원가입 API 목록"
  - name: "User Withdrawal APIs"
    description: "회원탈퇴 API 목록"
  - name: "User Nickname APIs"
    description: "회원 별명 API 목록"
  - name: "Password Initialization APIs"
    description: "비밀번호 초기화 API 목록"
  - name: "Release Version APIs"
    description: "Release Version API 목록"
  - name: "Reaction APIs"
    description: "공감 API 목록"

paths:

  /geuls/{geulNo}/reaction:
    post:
      tags:
        - "Reaction APIs"
      summary: "공감 하기"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "geulNo"
          in: "path"
          required: true
          type: string
      responses:
        "200":
          description: "공감 성공"
        "500":
          description: "서버측 에러"

    delete:
      tags:
        - "Reaction APIs"
      summary: "공감 취소 하기"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "geulNo"
          in: "path"
          required: true
          type: string
      responses:
        "200":
          description: "공감 취소 성공"
        "500":
          description: "서버측 에러"

  /v1.3/current-release-versions/{currentReleaseVersion}/is-exist-forced-update-release-versions:
    get:
      tags:
        - "Release Version APIs"
      summary: "강제 업데이트 버전 존재 여부"
      produces:
        - "application/json"
      parameters:
        - name: "currentReleaseVersion"
          in: "path"
          required: true
          type: string
          description: "X.Y.Z 포맷을 지켜야 함"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ForcedUpdateReleaseVersionsExistenceApiResponse"
        "500":
          description: "서버측 에러"

  /v1.3/release-versions/evict:
    put:
      tags:
        - "Release Version APIs"
      summary: "강제 업데이트 버전 캐시 evict"
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
        "500":
          description: "서버측 에러"

  #서비스 상태 조회
  /v1.1/service-status:
    get:
      tags:
        - "Service Status APIs"
      summary: "서비스 상태 조회"
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
        "500":
          description: "서버측 에러"

  #글 등록
  /geuls:
    post:
      tags:
        - "Geul ETC APIs"
      summary: "글 등록"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/GeulRegisterRequest"
      produces:
        - "application/json"
      responses:
        "201":
          description: "등록 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "401":
          description: "유효하지 않은 토큰입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "500":
          description: "서버측 에러"

  #글 상세조회
  /geuls/{geulNo}:
    get:
      tags:
        - "Geul Search APIs"
      summary: "글 상세조회"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "geulNo"
          in: "path"
          required: true
          type: integer
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 공백값이거나 회원인증타입이 올바르지 않습니다."
        "403":
          description: "조회 권한이 없습니다."
        "500":
          description: "서버측 에러"

    #글 수정
    put:
      tags:
        - "Geul ETC APIs"
      summary: "글 수정"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "geulNo"
          in: "path"
          required: true
          type: integer
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/GeulRegisterRequest"
      produces:
        - "application/json"
      responses:
        "200":
          description: "수정 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "401":
          description: "글을 수정할 수 있는 권한이 없습니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "410":
          description: "존재하지 않는 글입니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

    #글 삭제
    delete:
      tags:
        - "Geul ETC APIs"
      summary: "글 삭제"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "geulNo"
          in: "path"
          required: true
          type: integer
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
      produces:
        - "application/json"
      responses:
        "200":
          description: "수정 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "401":
          description: "글을 삭제할 수 있는 권한이 없습니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "410":
          description: "존재하지 않는 글입니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"


  /v1.2/geuls/{geulNo}:
    get:
      tags:
        - "Geul Search APIs"
      summary: "글 상세조회"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "geulNo"
          in: "path"
          required: true
          type: integer
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "401":
          description: "글을 조회할 수 있는 권한이 없습니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"


  #월별 글을 작성한 일자 목록 조회
  /users/{userNo}/days-geul-count-of-month:
    get:
      tags:
        - "Geul Search APIs"
      summary: "월별 글을 작성한 일자 목록 조회"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userNo"
          in: "path"
          required: true
          type: integer
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "searchYear"
          in: query
          required: true
          type: integer
        - name: "searchMonth"
          in: query
          required: true
          type: integer
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 공백값이거나 회원인증타입이 올바르지 않습니다."
        "403":
          description: "조회할 수 있는 권한이 없습니다."
        "500":
          description: "서버측 에러"

  #월별 글을 작성한 일자 목록 조회
  /v1.2/users/{userNo}/days-geul-count-of-month:
    get:
      tags:
        - "Geul Search APIs"
      summary: "월별 글을 작성한 일자 목록 조회"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userNo"
          in: "path"
          required: true
          type: integer
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "searchYear"
          in: query
          required: true
          type: integer
        - name: "searchMonth"
          in: query
          required: true
          type: integer
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "401":
          description: "글을 조회할 수 있는 권한이 없습니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

  #회원 작성한 글 목록 조회
  /users/{userNo}/geuls:
    get:
      tags:
        - "Geul Search APIs"
      summary: "회원이 작성한 글 목록 조회"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userNo"
          in: "path"
          required: true
          type: integer
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "orderType"
          in: query
          required: true
          type: string
          enum: [ ASC, DESC ]
        - name: "itemCount"
          in: query
          required: false
          type: integer
        - name: "page"
          in: query
          required: false
          type: integer
        - name: "searchDate"
          in: query
          required: false
          type: string
          format: date
          description: format = yyyy-MM-dd
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 공백값이거나 회원인증타입이 올바르지 않습니다."
        "403":
          description: "조회할 수 있는 권한이 없습니다."
        "500":
          description: "서버측 에러"

  #회원 작성한 글 목록 조회
  /v1.2/users/{userNo}/geuls:
    get:
      tags:
        - "Profile APIs"
      summary: "회원이 작성한 글 목록 조회"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userNo"
          in: "path"
          required: true
          type: integer
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "itemCount"
          in: query
          required: false
          type: integer
        - name: "searchDate"
          in: query
          required: false
          type: string
          format: date
          description: format = yyyy-MM-dd
        - name: "exclusiveStandardGeulNo"
          in: query
          required: false
          type: integer
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

  #회원 프로필 조회
  /v1.2/users/{userNo}/profile:
    get:
      tags:
        - "Profile APIs"
      summary: "회원 프로필 조회 (별명, 소개글)"
      consumes:
        - "application/json"
      parameters:
        - name: "userNo"
          in: "path"
          required: true
          type: integer
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "410":
          description: "존재하지 않는 회원입니다."
        "500":
          description: "서버측 에러"

  #프로필 업데이트
  /v1.2/users/profile:
    put:
      tags:
        - "Profile APIs"
      summary: "회원 프로필 업데이트 (별명, 소개글)"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UserProfileSaveRequest"
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "409":
          description: "이미 사용중인 별명입니다."
        "410":
          description: "존재하지 않는 회원입니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

  #카테고리별 최신글 목록 조회
  /v1.2/categories/{category}/geuls:
    get:
      tags:
        - "Geul Search APIs"
      summary: "카테고리별 최신글 목록 조회"
      consumes:
        - "application/json"
      parameters:
        - name: "category"
          in: "path"
          required: true
          type: string
          enum: [ BOOK, MOVIE, MUSIC, DRAMA, ETC ]
        - name: "exclusiveStandardGeulNo"
          in: query
          required: false
          type: integer
        - name: "itemCount"
          in: query
          required: false
          type: integer
      produces:
        - "application/json"
      responses:
        "200":
          description: "조회 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "서버측 에러"

  #일반 회원 로그인
  /user/auth:
    post:
      tags:
        - "General User Login APIs"
      summary: "일반 회원 로그인"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer accessToken"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL ]
      produces:
        - "application/json"
      responses:
        "200":
          description: "로그인 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 공백값이거나 회원인증타입이 올바르지 않습니다."
        "401":
          description: "유효하지 않은 토큰입니다."
        "402":
          description: "만료된 토큰입니다."
        "500":
          description: "서버측 에러"

  #일반 회원 로그인
  /v1.1/user/auth:
    post:
      tags:
        - "General User Login APIs"
      summary: "일반 회원 로그인"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer accessToken"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Environment"
      produces:
        - "application/json"
      responses:
        "200":
          description: "로그인 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 공백값이거나 회원인증타입이 올바르지 않습니다."
        "500":
          description: "서버측 에러"

  #일반 회원 로그인
  /v1.2/user/auth:
    post:
      tags:
        - "General User Login APIs"
      summary: "일반 회원 로그인"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer accessToken"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Environment"
      produces:
        - "application/json"
      responses:
        "200":
          description: "로그인 성공"
          schema:
            $ref: "#/definitions/GeneralLoginApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

  #리프레시 토큰을 통해 엑세스 토큰 재발급
  /user/token:
    post:
      tags:
        - "General User Login APIs"
      summary: "리프레시 토큰을 통해 엑세스 토큰 재발급"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer refreshToken"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "재발급 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 비어있습니다."
        "401":
          description: "유효하지 않은 refresh token 입니다."
        "402":
          description: "Refresh token이 만료됐습니다."
        "500":
          description: "서버측 에러"


  #리프레시 토큰을 통해 엑세스 토큰 재발급
  /v1.2/user/token:
    post:
      tags:
        - "General User Login APIs"
      summary: "리프레시 토큰을 통해 엑세스 토큰 재발급"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer refreshToken"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "재발급 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 비어있습니다."
        "402":
          description: "Refresh token이 만료됐습니다."
        "411":
          description: "유효하지 않은 refresh token 입니다."
        "500":
          description: "서버측 에러"


  #엑세스, 리프레시 토큰 재발급
  /user/all-token:
    post:
      tags:
        - "General User Login APIs"
      summary: "엑세스, 리프레시 토큰 재발급"
      consumes:
        - "application/json"
      parameters:
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Reissuance"
      produces:
        - "application/json"
      responses:
        "200":
          description: "재발급 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "이메일 또는 패스워드가 공백이거나 회원인증타입이 올바르지않습니다."
        "401":
          description: "이메일 또는 패스워드가 올바르지 않습니다."
        "500":
          description: "서버측 에러"

  /v1.2/user/all-token:
    post:
      tags:
        - "General User Login APIs"
      summary: "엑세스, 리프레시 토큰 재발급"
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Reissuance"
      produces:
        - "application/json"
      responses:
        "200":
          description: "재발급 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "이메일 또는 패스워드가 요청에 올바르지 않습니다."
        "401":
          description: "이메일 또는 패스워드가 올바르지 않습니다."
        "500":
          description: "서버측 에러"

  #비밀번호 초기화를 위한 인증번호 전송
  /v1.2/auth/password-initialization/emails/{email}:
    post:
      tags:
        - "Password Initialization APIs"
      summary: "비밀번호 초기화를 위한 인증번호 이메일 전송"
      consumes:
        - "application/json"
      parameters:
        - name: "email"
          in: path
          required: true
          type: string
      produces:
        - "application/json"
      responses:
        "200":
          description: "인증번호 전송 성공"
        "410":
          description: "해당 이메일로 가입된 정보가 존재하지 않습니다."
        "500":
          description: "서버측 에러"

  #비밀번호 초기화를 위한 인증번호 확인
  /v1.2/auth/password-initialization/confirmation:
    post:
      tags:
        - "Password Initialization APIs"
      summary: "비밀번호 초기화를 위한 인증번호 확인 (인증번호 1회 유효)"
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PasswordInitializationConfirmation"
      produces:
        - "application/json"
      responses:
        "200":
          description: "인증번호 확인 완료"
        "401":
          description: "인증 가능 시간이 지났거나 이메일 또는 인증번호가 올바르지 않습니다."
        "500":
          description: "서버측 에러"

  #비밀번호 변경
  /v1.2/auth/password-initialization:
    put:
      tags:
        - "Password Initialization APIs"
      summary: "비밀번호 변경 (인증번호 1회 유효)"
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PasswordInitialization"
      produces:
        - "application/json"
      responses:
        "200":
          description: "비밀번호 변경 완료"
        "400":
          description: "인증 번호 또는 이메일이 올바르지 않습니다."
        "401":
          description: "해당 이메일로 가입된 정보가 존재하지 않습니다."
        "500":
          description: "서버측 에러"

  #서드파티 회원 로그인
  /third-party/user/auth:
    post:
      tags:
        - "Third-party User Login APIs"
      summary: "서드파티 회원 로그인"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ KAKAO, APPLE ]
      produces:
        - "application/json"
      responses:
        "200":
          description: "로그인 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 공백값이거나 회원인증타입이 올바르지 않습니다."
        "401":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

  #서드파티 회원 로그인
  /v1.1/third-party/user/auth:
    post:
      description: "APPLE 은 access token 대신 refresh token 으로 인증 시도하며 refresh token 은 만료시간이 없음."
      tags:
        - "Third-party User Login APIs"
      summary: "서드파티 회원 로그인"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "KAKAO - Bearer accessToken / APPLE - Bearer refreshToken"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ KAKAO, APPLE ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Environment"
      produces:
        - "application/json"
      responses:
        "200":
          description: "로그인 성공"
          schema:
            $ref: "#/definitions/ThirdPartyLoginApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"



  #일반 회원가입
  /users:
    post:
      tags:
        - "User Join APIs"
      summary: "일반 회원가입, 만료기간 [accessToken/24시간] [refreshToken/30일]"
      consumes:
        - "application/json"
      parameters:
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/GenralUserJoinRequest"
      produces:
        - "application/json"
      responses:
        "201":
          description: "회원가입 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원인증타입이 올바르지 않습니다."
        "500":
          description: "서버측 에러"

  #일반 회원가입
  /v1.2/users:
    post:
      tags:
        - "User Join APIs"
      summary: "일반 회원가입, 만료기간 [accessToken/24시간] [refreshToken/30일]"
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/GenralUserJoinRequest"
      produces:
        - "application/json"
      responses:
        "201":
          description: "회원가입 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "이메일 또는 패스워드가 올바르지 않습니다."
        "409":
          description: "이미 가입된 정보가 존재합니다."
        "500":
          description: "서버측 에러"

  #서드파티 회원가입
  /third-party/users:
    post:
      tags:
        - "User Join APIs"
      summary: "서드파티 회원가입"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "KAKAO - Bearer accessToken / APPLE - Bearer idToken"
          required: true
          type: "string"
        - name: "AppleAuthorizationCode"
          in: "header"
          description: "APPLE 회원가입시 필요"
          required: false
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ KAKAO, APPLE ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ThirdPartyUseJoinRequest"
      produces:
        - "application/json"
      responses:
        "201":
          description: "회원가입 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

  #서드파티 회원가입
  /v1.2/third-party/users:
    post:
      tags:
        - "User Join APIs"
      summary: "서드파티 회원가입"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "KAKAO - Bearer accessToken / APPLE - Bearer idToken"
          required: true
          type: "string"
        - name: "AppleAuthorizationCode"
          in: "header"
          description: "APPLE 회원가입시 필요"
          required: false
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ KAKAO, APPLE ]
      produces:
        - "application/json"
      responses:
        "201":
          description: "회원가입 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"


  #이메일 인증메일 전송
  /v1.1.2/auth/emails/{email}:
    post:
      tags:
        - "User Join APIs"
      summary: "이메일 인증메일 전송 (인증 시간 5분간 유효)"
      consumes:
        - "application/json"
      parameters:
        - name: "email"
          in: path
          required: true
          type: string
      produces:
        - "application/json"
      responses:
        "200":
          description: "인증 메일 전송 완료"
          schema:
            $ref: "#/definitions/EmailAuthenticationApiResponse"
        "409":
          description: "이미 가입된 이메일이 존재합니다."
        "500":
          description: "서버측 에러"

  #이메일 인증 여부 검사
  /v1.1.2/auth/auth-keys/{authKey}:
    post:
      tags:
        - "User Join APIs"
      summary: "이메일 인증 여부 검사 (메일인증 완료 시점부터 3분간 유효)"
      consumes:
        - "application/json"
      parameters:
        - name: "authKey"
          in: path
          required: true
          type: string
      produces:
        - "application/json"
      responses:
        "200":
          description: "이메일 인증 완료"
        "401":
          description: "인증 실패"
        "500":
          description: "서버측 에러"

  #별명 중복 검사
  /v1.1/users/nicknames/{nickname}:
    get:
      tags:
        - "User Nickname APIs"
      summary: "별명 중복 검사"
      consumes:
        - "application/json"
      parameters:
        - name: "nickname"
          in: path
          required: true
          type: string
      produces:
        - "application/json"
      responses:
        "200":
          description: "성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "서버측 에러"

  #별명 등록
  /v1.1/users/nicknames:
    post:
      tags:
        - "User Nickname APIs"
      summary: "별명 등록"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL, KAKAO, APPLE ]
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UserProfileSaveRequest"
      produces:
        - "application/json"
      responses:
        "200":
          description: "등록 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

  #일반 회원 탈퇴
  /users/withdrawal:
    delete:
      tags:
        - "User Withdrawal APIs"
      summary: "일반 회원 탈퇴"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer accessToken"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ GENERAL ]
      produces:
        - "application/json"
      responses:
        "201":
          description: "탈퇴 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "토큰이 공백값이거나 회원인증타입이 올바르지 않습니다."
        "401":
          description: "유효하지 않은 토큰입니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "500":
          description: "서버측 에러"

  #일반 회원 탈퇴
  /v1.2/users/withdrawal:
    delete:
      tags:
        - "User Withdrawal APIs"
      summary: "일반 회원 탈퇴"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer accessToken"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "201":
          description: "탈퇴 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

  #서드파티 회원 탈퇴
  /third-party/users/withdrawal:
    delete:
      tags:
        - "User Withdrawal APIs"
      summary: "서드파티 회원 탈퇴"
      consumes:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "KAKAO - Bearer accessToken / APPLE - Bearer refreshToken"
          required: true
          type: "string"
        - name: "userAuthenticationType"
          in: query
          required: true
          type: string
          enum: [ KAKAO, APPLE ]
      produces:
        - "application/json"
      responses:
        "201":
          description: "탈퇴 성공"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "회원 인증 타입 또는 토큰이 NULL 입니다."
        "402":
          description: "토큰이 만료됐습니다."
        "408":
          description: "가입된 정보가 존재하지 않습니다."
        "411":
          description: "유효하지 않은 토큰입니다."
        "500":
          description: "서버측 에러"

definitions:
  ApiHeader:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string

  ApiResponse:
    type: object
    properties:
      header:
        $ref: "#/definitions/ApiHeader"
      data:
        type: object

  EmailAuthenticationApiResponse:
    type: object
    properties:
      header:
        $ref: "#/definitions/ApiHeader"
      data:
        $ref: "#/definitions/EmailAuthenticationResponse"
        
  GeneralLoginApiResponse:
    type: object
    properties:
      header:
        $ref: "#/definitions/ApiHeader"
      data:
        type: string
        example:
          userNo: int
          email: string
          name: "null"
          nickname: string
          userAuthenticationType: string
          jwtToken: "null"
          accessToken: string
          refreshToken: string

  ThirdPartyLoginApiResponse:
    type: object
    properties:
      header:
        $ref: "#/definitions/ApiHeader"
      data:
        type: string
        example:
          userNo: int
          email: "null"
          name: "null"
          nickname: "null"
          userAuthenticationType: string
          jwtToken: "null"
          accessToken: "null"
          refreshToken:
            kakao: "null"
            apple: "string"


  EmailAuthenticationResponse:
    type: object
    properties:
      authKey:
        type: string

  UserProfileSaveRequest:
    type: object
    required:
      - nickname
    properties:
      nickname:
        type: string
      introduction:
        type: string

  ThirdPartyUseJoinRequest:
    type: object
    required:
      - nickname
      - osType
      - osVersion
    properties:
      nickname:
        type: string
      osType:
        type: string
        enum:
          - iOS
          - ANDROID
      osVersion:
        type: string

  GenralUserJoinRequest:
    type: object
    required:
      - email
      - password
      - nickname
      - osType
      - osVersion
    properties:
      email:
        type: string
      password:
        type: string
      nickname:
        type: string
      osType:
        type: string
        enum:
          - iOS
          - ANDROID
      osVersion:
        type: string

  Reissuance:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string

  Environment:
    type: object
    required:
      - osType
      - osVersion
      - pushToken
      - appVersion
    properties:
      osType:
        type: string
        enum:
          - iOS
          - ANDROID
      osVersion:
        type: string
      pushToken:
        type: string
      appVersion:
        type: string

  GeulRegisterRequest:
    type: object
    required:
      - geulContent
      - geulSources
      - geulCategory
      - isPrivate
    properties:
      geulContent:
        type: string
      geulSources:
        type: string
      geulAuthor:
        type: string
      pageOfBook:
        type: integer
      geulCategory:
        type: string
        enum:
          - BOOK
          - MOVIE
          - MUSIC
          - DRAMA
          - ETC
      isPrivate:
        type: boolean

  PasswordInitialization:
    type: object
    required:
      - email
      - password
      - authNo
    properties:
      email:
        type: string
      password:
        type: string
      authNo:
        type: string
  PasswordInitializationConfirmation:
    type: object
    required:
      - email
      - authNo
    properties:
      email:
        type: string
      authNo:
        type: string
  ForcedUpdateReleaseVersionsExistenceApiResponse:
    type: object
    properties:
      header:
        $ref: "#/definitions/ApiHeader"
      data:
        $ref: "#/definitions/ForcedUpdateReleaseVersionsExistence"
  ForcedUpdateReleaseVersionsExistence:
    type: object
    required:
      - isExistForcedUpdateReleaseVersions
    properties:
      isExistForcedUpdateReleaseVersions:
        type: boolean